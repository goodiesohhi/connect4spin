
<section class="section">

  {{#if user}}
  <!--
  <canvas id="taicanvas" width="800" height="600"></canvas>
  <canvas class="right" id="taibox" width="200" height="600"></canvas>

-->
<script
			  src="https://code.jquery.com/jquery-3.5.1.js"
			  integrity="sha256-QWo7LDvxbWT2tbbQ97B53yJnYU3WhH/C8ycbRAkjPDc="
			  crossorigin="anonymous"></script>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
      <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
      <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>






<link rel="stylesheet" href="/stylesheets/style.css">
<script src="/javascripts/taidata.js"></script>

<script type="text/javascript">

var body = document.body,
    overlay = document.querySelector('.overlay'),
    overlayBtts = document.querySelectorAll('button[class$="overlay"]');

[].forEach.call(overlayBtts, function(btt) {

  btt.addEventListener('click', function() {

     /* Detect the button class name */
     var overlayOpen = this.className === 'open-overlay';

     /* Toggle the aria-hidden state on the overlay and the
        no-scroll class on the body */
     overlay.setAttribute('aria-hidden', !overlayOpen);
     body.classList.toggle('noscroll', overlayOpen);

     /* On some mobile browser when the overlay was previously
        opened and scrolled, if you open it again it doesn't
        reset its scrollTop property */
     overlay.scrollTop = 0;

  }, false);

});




//  owner:null,
//  space:"none",
RecRooms=0;
var GameScene;
var testing=true;
var SelectedPiece=null;
var SelectedRange=null;
var Selects=[]
var winText=null;
var localPlayer;
var makeMove=true;
var following=null;
var localHasWon=false;
var wintimer=200;
var revPX=function(p) {
  z=p.worldX;


  var x=Math.floor((4350-z)/100)
return x;



}
var getPX=function(dat) {
var str=dat.tile.split(";")
var x =parseInt(str[1] , 10)

return 4300-100*x

}


getValidJumps=function(o) {

  jumps=[]
  x=0;
  y=0;

for (var i in o.movementData.jumps) {

    if(o.owner=="p1") {
 x=-o.movementData.jumps[i].x
 y=-o.movementData.jumps[i].y
} else {
  x=o.movementData.jumps[i].x
  y=o.movementData.jumps[i].y
}


z=(getX(o.tile)+x)

 var destination= coordStr( coordInt(o.tile)+y) +";"+ z;

 test=checkSpace(destination,gameN.gamestate.board);

 if(test==null) {
    jumps.push(destination)
 } else {

if(test.owner==o.owner) {

} else {
 jumps.push(destination)
}
}
}

return jumps;

}

getValidMoves=function(o) {



 if(o.movementData.type=="h") {


   results=[]
for (var u in o.movementData.fusion) {
  k={}

  k=o.movementData.fusion[u]
  k.owner=o.owner;
  k.tile=o.tile;

  if(k.movementData.type=="jump") {

 results=results.concat(getValidJumps(k))



} else if (k.movementData.type=="step") {


results=results.concat(getValidSteps(k))

  }
}

return results;

 } else {
 if(o.movementData.type=="jump") {

return getValidJumps(o)



} else if (o.movementData.type=="step") {


return getValidSteps(o)
 }
}




}


getValidSteps=function(o) {
var amounts=1;
var initJump;

var initJumpUp;
var initJumpDown;
var initJumpLeft;
var initJumpRight;
var initJumpUpRight
var initJumpUpLeft;
var initJumpDownLeft;
var initJumpDownRight;
    if(o.movementData.initJump==null) {
initJump=1


initJumpUp = initJump;
initJumpDown = initJump;
initJumpLeft = initJump;
initJumpRight = initJump;
initJumpUpRight = initJump
initJumpUpLeft = initJump;
initJumpDownLeft = initJump;
initJumpDownRight = initJump;
} else{

  initJump=o.movementData.initJump
  if(o.movementData.upto!=null) {
  amounts=initJump;
  }
}

if(o.movementData.initJumpUp==null) {
initJumpUp=1
} else{
  initJumpUp=o.movementData.initJump
}
if(o.movementData.initJumpDown==null) {
initJumpDown=1
} else{
  initJumpDown=o.movementData.initJump
}
if(o.movementData.initJumpLeft==null) {
initJumpLeft=1
} else{
  initJumpLeft=o.movementData.initJump
}
if(o.movementData.initJumpRight==null) {
initJumpRight=1
} else{
  initJumpRight=o.movementData.initJump
}
if(o.movementData.initJumpDownLeft==null) {
initJumpDownLeft=1
} else{
  initJumpDownLeft=o.movementData.initJump
}
if(o.movementData.initJumpUpLeft==null) {
initJumpUpLeft=1
} else{
  initJumpUpLeft=o.movementData.initJump
}
if(o.movementData.initJumpUpRight==null) {
initJumpUpRight=1
} else{
  initJumpUpRight=o.movementData.initJump
}
if(o.movementData.initJumpDownRight==null) {
initJumpDownRight=1
} else{
  initJumpDownRight=o.movementData.initJump
}

if(o.movementData.initJump==null) {
initJump=1

} else{
  initJumpUp = initJump;
  initJumpDown = initJump;
  initJumpLeft = initJump;
  initJumpRight = initJump;
  initJumpUpRight = initJump
  initJumpUpLeft = initJump;
  initJumpDownLeft = initJump;
  initJumpDownRight = initJump;


}
    var validMoves=[]
   var travelled=[]
  if(o.movementData.upto!=null) {
   if(o.owner=="p2") {
    for(i=0;i<initJumpUp;i++){
    travelled[0+10*i]=traverse(o,o.movementData.up,0,1,initJumpUp-i)}
        for(i=0;i<initJumpDown;i++){
      travelled[1+10*i]=traverse(o,o.movementData.down,0,-1,initJumpDown-i)}
          for(i=0;i<initJumpLeft;i++){
        travelled[2+10*i]=traverse(o,o.movementData.left,-1,0,initJumpLeft-i)}
            for(i=0;i<initJumpRight;i++){
          travelled[3+10*i]=traverse(o,o.movementData.right,1,0,initJumpRight-i)}
              for(i=0;i<initJumpDownLeft;i++){
            travelled[4+10*i]=traverse(o,o.movementData.downleft,-1,-1,initJumpDownLeft-i)}
                for(i=0;i<initJumpDownRight;i++){
              travelled[5+10*i]=traverse(o,o.movementData.downright,1,-1,initJumpDownRight-i)}
                  for(i=0;i<initJumpUpLeft;i++){
                travelled[6+10*i]=traverse(o,o.movementData.upleft,-1,1,initJumpUpLeft-i)
              }
                    for(i=0;i<initJumpUpRight;i++){
                  travelled[7+10*i]=traverse(o,o.movementData.upright,1,1,initJumpUpRight-i)
                }
                } else {

                  for(i=0;i<initJumpUp;i++){
                  travelled[0+10*i]=traverse(o,o.movementData.up,0,-1,initJumpUp-i)}
                      for(i=0;i<initJumpDown;i++){
                    travelled[1+10*i]=traverse(o,o.movementData.down,0,1,initJumpDown-i)}
                        for(i=0;i<initJumpLeft;i++){
                      travelled[2+10*i]=traverse(o,o.movementData.left,1,0,initJumpLeft-i)}
                          for(i=0;i<initJumpRight;i++){
                        travelled[3+10*i]=traverse(o,o.movementData.right,-1,0,initJumpRight-i)}
                            for(i=0;i<initJumpDownLeft;i++){
                          travelled[4+10*i]=traverse(o,o.movementData.downleft,1,1,initJumpDownLeft-i)}
                              for(i=0;i<initJumpDownRight;i++){
                            travelled[5+10*i]=traverse(o,o.movementData.downright,-1,1,initJumpDownRight-i)}
                                for(i=0;i<initJumpUpLeft;i++){
                              travelled[6+10*i]=traverse(o,o.movementData.upleft,1,-1,initJumpUpLeft-i)
                            }
                                  for(i=0;i<initJumpUpRight;i++){
                                travelled[7+10*i]=traverse(o,o.movementData.upright,-1,-1,initJumpUpRight-i)
                              }
                }
}       else {


   if(o.owner=="p2") {
    travelled[0+10]=traverse(o,o.movementData.up,0,1,initJumpUp)
      travelled[1+10]=traverse(o,o.movementData.down,0,-1,initJumpDown)
        travelled[2+10]=traverse(o,o.movementData.left,-1,0,initJumpLeft)
          travelled[3+10]=traverse(o,o.movementData.right,1,0,initJumpRight)
            travelled[4+10]=traverse(o,o.movementData.downleft,-1,-1,initJumpDownLeft)
              travelled[5+10]=traverse(o,o.movementData.downright,1,-1,initJumpDownRight)
                travelled[6+10]=traverse(o,o.movementData.upleft,-1,1,initJumpUpLeft)
                  travelled[7+10]=traverse(o,o.movementData.upright,1,1,initJumpUpRight)
                } else {

                  travelled[0+10]=traverse(o,o.movementData.up,0,-1,initJumpUp)
                    travelled[1+10]=traverse(o,o.movementData.down,0,1,initJumpDown)
                      travelled[2+10]=traverse(o,o.movementData.left,1,0,initJumpLeft)
                        travelled[3+10]=traverse(o,o.movementData.right,-1,0,initJumpRight)
                          travelled[4+10]=traverse(o,o.movementData.downleft,1,1,initJumpDownLeft)
                            travelled[5+10]=traverse(o,o.movementData.downright,-1,1,initJumpDownRight)
                              travelled[6+10]=traverse(o,o.movementData.upleft,1,-1,initJumpUpLeft)
                                travelled[7+10]=traverse(o,o.movementData.upright,-1,-1,initJumpUpRight)


                }
}



              travelled.forEach((item, i) => {
                      var value = item
                    //    console.log(value.dat)
                    var i;

                      for(i=0;i<value.path.length;i++) {
                        var value2 = value.path[i];
                          if (value2!=null){
                        possible=value.dat[value2]
                        if(possible!=null) {
                          if(o.owner==possible.owner) {


                          break
                          } else {
                          //  console.log("should take")
                            validMoves.push(value2)
                          break

                          }

                        } else {

                          validMoves.push(value2)
                        }
                      }
                    }

                    });




  return validMoves;

}

traverse=function(o,distance, x,y,initJump) {

 var result={}
    result.dat={}

 result.path=[]

 var xdir =1;
 var ydir =1;


 var xStr;
 var yStr;
 var stop=false
var cancel=false
  for (var i = initJump; i <= distance; i++) {
    cancel=false

    c=(coordInt( o.tile)+(i)*y)

    if(c<1) {
      c=900
      stop=true;
        cancel=true;
    }

    if(c>36){
      stop=true;
      cancel=true;
      c=900
    }
    if(c>0 && c<37) {
      yStr=coordStr (c);
    }

    d=getX(o.tile)+(i)*x
    if(d<1) {
      d=900
        stop=true;
          cancel=true;
    }
    if(d>36) {
      d=3900
        stop=true;
          cancel=true;
    }

    if(d>0&&d<37) {
  xStr= d

}
  var ar= yStr+";"+xStr;

  if(!cancel) {

  result.path[i-1]=ar



  space=checkSpace(ar,gameN.gamestate.board)

  if(space!=null) {

  result.dat[ar]=space;
} else {
  result.dat[ar]=null;
}
}
}



  return result;
}


coordInt=function(strx) {
  x=0
  var str=strx.split(";")
  if(str[0]=="a") {
  x=1
  }
  else if (str[0]=="b") {
  x=2
  }
  else if (str[0]=="c") {
  x=3
  }
  else if (str[0]=="d") {
  x=4
  }else if (str[0]=="e") {
  x=5
  }else if (str[0]=="f") {
  x=6
  }else if (str[0]=="g") {
  x=7
  }else if (str[0]=="h") {
  x=8
  }else if (str[0]=="i") {
  x=9
  }else if (str[0]=="j") {
  x=10
  }else if (str[0]=="k") {
  x=11
  }else if (str[0]=="l") {
  x=12
  }else if (str[0]=="m") {
  x=13
  }else if (str[0]=="n") {
  x=14
  }else if (str[0]=="o") {
  x=15
  }else if (str[0]=="p") {
  x=16
  }else if (str[0]=="q") {
  x=17
  }else if (str[0]=="r") {
  x=18
  }else if (str[0]=="s") {
  x=19
  }else if (str[0]=="t") {
  x=20
  }else if (str[0]=="u") {
  x=21
  }else if (str[0]=="v") {
  x=22
  }else if (str[0]=="w") {
  x=23
  }else if (str[0]=="x") {
  x=24
  }else if (str[0]=="y") {
  x=25
  }else if (str[0]=="z") {
  x=26
  }else if (str[0]=="aa") {
  x=27
  }else if (str[0]=="bb") {
  x=28
  }else if (str[0]=="cc") {
  x=29
  }else if (str[0]=="dd") {
  x=30
  }else if (str[0]=="ee") {
  x=31
  }else if (str[0]=="ff") {
  x=32
  }else if (str[0]=="gg") {
  x=33
  }else if (str[0]=="hh") {
  x=34
  }else if (str[0]=="ii") {
  x=35
  }else if (str[0]=="jj") {
  x=36
  }

return x;

}
coordStr=function(x) {
  str=0;
  if(x==1) {
    str="a"
  } else if(x==2) {
    str="b"
  }
  else if(x==3) {
    str="c"
  }

  else if(x==4) {
    str="d"
  }

  else if(x==5) {
    str="e"
  }

  else if(x==6) {
    str="f"
  }

  else if(x==7) {
    str="g"
  }

  else if(x==8) {
    str="h"
  }
  else if(x==9) {
    str="i"
  }
  else if(x==10) {
    str="j"
  }
  else if(x==11) {
    str="k"
  }
  else if(x==12) {
    str="l"
  }
  else if(x==13) {
    str="m"
  }
  else if(x==14) {
    str="n"
  }
  else if(x==15) {
    str="o"
  }
  else if(x==16) {
    str="p"
  }
  else if(x==17) {
    str="q"
  }
  else if(x==18) {
    str="r"
  }
  else if(x==19) {
    str="s"
  }
  else if(x==20) {
    str="t"
  }
  else if(x==21) {
    str="u"
  }
  else if(x==22) {
    str="v"
  }
  else if(x==23) {
    str="w"
  }
  else if(x==24) {
    str="x"
  }
  else if(x==25) {
    str="y"
  }
  else if(x==26) {
    str="z"
  }
  else if(x==27) {
    str="aa"
  }
  else if(x==28) {
    str="bb"
  }
  else if(x==29) {
    str="cc"
  }
  else if(x==30) {
    str="dd"
  }
  else if(x==31) {
    str="ee"
  }
  else if(x==32) {
    str="ff"
  }
  else if(x==33) {
    str="gg"
  }
  else if(x==34) {
    str="hh"
  }
  else if(x==35) {
    str="ii"
  }
  else if(x==36) {
    str="jj"
  }

return str;
}



getX= function(x) {
return parseInt(x.split(";")[1]);

}
checkSpace =function(space,board) {

var re=null
    for(var key in board) {
        var value = board[key];
        if(value==null) {

        } else {
        if(value.tile==space){
          re=value

        }
      }
    }

return re;
}


var removeSelection=function() {
for (var x in Selects) {
//  console.log(x)

  var z= Selects[x];
  z.destroy()
}

}
var makeSelection=function(pt) {



  for (var x in SelectedRange) {
    var dat={}
    var re=SelectedRange[x];

    dat.tile=re;
    var piece={}
    piece.x=getPX(dat)
    piece.y=getPY(dat)

    temp=pt.add.sprite( piece.x,piece.y, 'box')
    temp.alpha=0.5;
    Selects.push(temp);
}
}


var revPY=function(p) {
  z=p.worldY;
var x=Math.floor((z+100)/100)
var str;
if(x==1) {
  str="a"
} else if(x==2) {
  str="b"
}
else if(x==3) {
  str="c"
}

else if(x==4) {
  str="d"
}

else if(x==5) {
  str="e"
}

else if(x==6) {
  str="f"
}

else if(x==7) {
  str="g"
}

else if(x==8) {
  str="h"
}
else if(x==9) {
  str="i"
}
else if(x==10) {
  str="j"
}
else if(x==11) {
  str="k"
}
else if(x==12) {
  str="l"
}
else if(x==13) {
  str="m"
}
else if(x==14) {
  str="n"
}
else if(x==15) {
  str="o"
}
else if(x==16) {
  str="p"
}
else if(x==17) {
  str="q"
}
else if(x==18) {
  str="r"
}
else if(x==19) {
  str="s"
}
else if(x==20) {
  str="t"
}
else if(x==21) {
  str="u"
}
else if(x==22) {
  str="v"
}
else if(x==23) {
  str="w"
}
else if(x==24) {
  str="x"
}
else if(x==25) {
  str="y"
}
else if(x==26) {
  str="z"
}
else if(x==27) {
  str="aa"
}
else if(x==28) {
  str="bb"
}
else if(x==29) {
  str="cc"
}
else if(x==30) {
  str="dd"
}
else if(x==31) {
  str="ee"
}
else if(x==32) {
  str="ff"
}
else if(x==33) {
  str="gg"
}
else if(x==34) {
  str="hh"
}
else if(x==35) {
  str="ii"
}
else if(x==36) {
  str="jj"
}




return str;

}

var getPY=function(dat) {
x=0
var str=dat.tile.split(";")
if(str[0]=="a") {
x=1
}
else if (str[0]=="b") {
x=2
}
else if (str[0]=="c") {
x=3
}
else if (str[0]=="d") {
x=4
}else if (str[0]=="e") {
x=5
}else if (str[0]=="f") {
x=6
}else if (str[0]=="g") {
x=7
}else if (str[0]=="h") {
x=8
}else if (str[0]=="i") {
x=9
}else if (str[0]=="j") {
x=10
}else if (str[0]=="k") {
x=11
}else if (str[0]=="l") {
x=12
}else if (str[0]=="m") {
x=13
}else if (str[0]=="n") {
x=14
}else if (str[0]=="o") {
x=15
}else if (str[0]=="p") {
x=16
}else if (str[0]=="q") {
x=17
}else if (str[0]=="r") {
x=18
}else if (str[0]=="s") {
x=19
}else if (str[0]=="t") {
x=20
}else if (str[0]=="u") {
x=21
}else if (str[0]=="v") {
x=22
}else if (str[0]=="w") {
x=23
}else if (str[0]=="x") {
x=24
}else if (str[0]=="y") {
x=25
}else if (str[0]=="z") {
x=26
}else if (str[0]=="aa") {
x=27
}else if (str[0]=="bb") {
x=28
}else if (str[0]=="cc") {
x=29
}else if (str[0]=="dd") {
x=30
}else if (str[0]=="ee") {
x=31
}else if (str[0]=="ff") {
x=32
}else if (str[0]=="gg") {
x=33
}else if (str[0]=="hh") {
x=34
}else if (str[0]=="ii") {
x=35
}else if (str[0]=="jj") {
x=36
}



return 100*x-50;

}
onObjectClicked=function(pointer,object) {

if(makeMove) {


      if(object.isTilemap) {
        locationP=revPY(pointer)+";"+revPX(pointer)
        socket.emit('makeMove', { location: locationP,piece:SelectedPiece.parRef.dat.pUUID ,room: gameN.id,player:  localPlayer});
        SelectedPiece=null
        SelectedRange=null
        removeSelection()
          layer.removeInteractive()
      } else {
      let objectName = object.texture.key;

        if(objectName === "piece") {
      if (SelectedPiece==null) {
      removeSelection()
      SelectedPiece=object
      SelectedRange=getValidMoves(SelectedPiece.parRef.dat);
      makeSelection(object.scene)
      layer.setInteractive({ useHandCursor: true })
    } else {

      locationP=revPY(pointer)+";"+revPX(pointer)
      socket.emit('makeMove', { location: locationP,piece:SelectedPiece.parRef.dat.pUUID ,room: gameN.id,player:  localPlayer});
      SelectedPiece=null;
      SelectedRange=null
      removeSelection()


    }
  }   if(objectName === "promote") {
      following=null;
  socket.emit('yesPromote', { room: gameN.id,player:  localPlayer});
  promoteBTN.destroy()
    endBTN.destroy();
      endBTN=null;
  promoteBTN=null;
  this.cameras.main.stopFollow()



  }

    if(objectName === "end") {

        following=null;
        socket.emit('endTurn', { room: gameN.id,player:  localPlayer});
        endBTN.destroy();
        promoteBTN.destroy();
        promoteBTN=null;
        endBTN=null;
        this.cameras.main.stopFollow();

    }
  }
}
    }



var makePiece=function(dat,p) {
var piece={}
piece.dat=dat

if(pieceSprites[dat.pUUID]!=null) {

  if(pieceSprites[dat.pUUID].text!=null) {
    pieceSprites[dat.pUUID].text.destroy()
    pieceSprites[dat.pUUID].text=null;
  }
    pieceSprites[dat.pUUID].destroy();
    pieceSprites[dat.pUUID]=null;
}


piece.x=getPX(dat)
piece.y=getPY(dat)
piece.dx=piece.x
piece.dy=piece.y
piece.sprite=p.add.sprite( piece.dx,piece.dy, 'piece');
piece.sprite.parRef=piece;
piece.sprite.track=false
piece.sprite.setInteractive({ useHandCursor: true })


if(dat.owner=="p2") {
  piece.sprite.flipY=true;
}

var SelectBox;
var textConfig={fontSize:'40px',color:'#000000',fontFamily: 'Arial'};
piece.text = p.add.text(piece.dx-(40+(25*dat.pID.length)),piece.dy-25,dat.pID.toUpperCase(),textConfig);
return piece.sprite;




}


/*
var locationz=""
if(window.location.hostname.includes("localhost")) {
  locationz='http://localhost:3001'
} else {
  locationz=window.location.hostname
}
*/
var game;
var layer =null
var tiles =null;
var taiSocket=0
var gameState={};
var pieceSprites;
var promoteBTN=null;
var endBTN=null;
jQuery(function ($) {
$( document ).ready(function() {


    $('#create').click(function(){

      createRoom();
      $('#startGameNow').trigger('click')

      window.location.reload(true);
    })

    $('#leaveBTN').click(function(){

      leaveGame();
      $('#logo').trigger('click')

     window.location.reload(true);
    })

    $('#sg').click(function(){

      startGame();
      $('#startGameNow').trigger('click')

      window.location.reload(true);
    })

    $('#joinC').click(function(){

      joinClick($(this).attr("value"));
      $('#startGameNow').trigger('click')

      window.location.reload(true);
    })



    $('#join').click(function(){

      joinRoom();
      $('#startGameNow').trigger('click')

      window.location.reload(true);
    })






  $( "#info" ).trigger('click')



taiSocket=socket;
var cam=null
var input=null;
input=null;
loaded=false
var Preload = new Phaser.Class({
Extends: Phaser.Scene,

  initialize:
  function GameScene ()
   {
       Phaser.Scene.call(this, { key: 'Preload', active: true });


   },
    preload:function () {

  },

    create:function(){




    },

    update:function()

    {

if(gameN!=null) {

      $( "#lobby" ).empty();
      $( "#lobby" ).append( "<p>Players: </p>" );
      for (var lo in gameN.players) {
          var opu=gameN.players[lo].name
          if(lo=="p1") {
            opu+= " (Room Owner)"
          }


          $( "#lobby" ).append( "<p>"+opu+"</p>" );
      }


      $( "#lobby" ).append( "<p>Spectators: </p>" );
        for (var lo in gameN.spectators) {

            var opu=gameN.spectators[lo].name

            $( "#lobby" ).append( "<p>"+opu+"</p>" );
        }

        if(gameN.started) {
        $('#startGameNow').trigger('click')

        this.scene.start('gameScene');
      }
      }






      if(!loaded) {

        if(gameN!=null) {

          if(gameN.gamestate!=null) {

            loaded=true;

            if(gameN.players["p1"]!=null) {
            if(gameN.players["p1"].name=="{{user.username}}"){
              localPlayer="p1"
            }
          }
            if(gameN.players["p2"]!=null) {
            if(gameN.players["p2"].name=="{{user.username}}"){
              localPlayer="p2"
            }
          }
          if(localPlayer!="p1") {
              $( "#sg" ).remove();
              startGame=null;

          }
          if (gameN.started) {


                $( "#sg" ).remove();
                startGame=null;


          }
          if(gameN.players["p2"]==null) {
              if(!testing) {
            $( "#sg" ).remove();

            startGame=null;
          }
          }


          }


        }
      }

    }


})


GameScene = new Phaser.Class({


Extends: Phaser.Scene,

initialize:

function GameScene ()
 {

     Phaser.Scene.call(this, { key: 'gameScene', active: false });


 },

preload:function ()
{
  this.load.image('tile','/images/taikyoku/tile.png');
  this.load.image('piece','/images/taikyoku/piece.png');
  this.load.image('select','/images/taikyoku/select.png');
  this.load.image('box','/images/taikyoku/box.png');
    this.load.image('promote','/images/taikyoku/promote.png');
      this.load.image('end','/images/taikyoku/END.png');
  this.load.tilemapTiledJSON('map', '/javascripts/board.json');
  if (this.game.canvas!=null) {
  this.game.canvas.id = 'game';
  }






},

create:function ()
{
  SelectedPiece=null;
    SelectedRange=null;
    Selects=[]
    winText=null;
    localPlayer;
    makeMove=true;
    promoteBTN=null;
    endBTN=null;

    localHasWon=false;
    wintimer=200;
  //this.add.image(400, 300, 'sky');
  var map = this.make.tilemap({ key: 'map' });
   tiles = map.addTilesetImage('tile', 'tile');
   layer = map.createStaticLayer(0, tiles, 650, 0);

for (var i = 1; i <37; i++) {
  var textConfig={fontSize:'50px',color:'#ffffff',fontFamily: 'Arial'};

  this.add.text(4280-(100*i),-100, i,textConfig)
}


for (var i = 1; i <37; i++) {
  var textConfig={fontSize:'50px',color:'#ffffff',fontFamily: 'Arial'};

  this.add.text(4300,-80+100*i, coordStr(i),textConfig)
}


input=this.input;
input.on('gameobjectdown',onObjectClicked);
var textConfig={fontSize:'80px',color:'#ffffff',fontFamily: 'Arial'};
if(gameN.players[gameN.gamestate.turnOwner]!=null) {
turntext = this.add.text(-575,-200, gameN.players[gameN.gamestate.turnOwner].name+"'s turn.",textConfig).setScrollFactor(0);
turntext.scale=1-this.cameras.main.zoom
} else {
turntext = this.add.text(-575-this.cameras.main.zoom*500,-200-this.cameras.main.zoom*500, "undefined's turn.",textConfig).setScrollFactor(0);
turntext.scale=20/(this.cameras.main.zoom*50)
}
//console.log(this.cameras.main.zoom)
//  this.cameras.main.setBounds(0, 0, map.widthInPixels, map.heightInPixels+2050);
  this.cameras.main.zoom =0.5;
  this.cameras.main.scrollX=1250;

  var cursors =  this.input.keyboard.createCursorKeys();
  var particles = this.add.particles('red');
  var controlConfig = {

      camera: this.cameras.main,

      zoomIn: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.Q),
      zoomOut: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.E),
      left: cursors.left,
      right: cursors.right,
      up: cursors.up,
      down: cursors.down,
      speed: 1,
      acceleration: 0.06,
drag: 0.0005,
maxSpeed: 1.0
  };



  var pieces=   0;
  pieceSprites={}

  cam = this.cameras.main;

  this.cameras.main.setLerp(0.1,0.1);
    this.cameras.main.setZoom(0.2);

     //f1.add(help, 'line1');
    // f1.add(help, 'line2');
     //f1.open();

  for(var key in gameN.gamestate.board) {
  var p= gameN.gamestate.board[key];
if(p!=null) {
  pieceSprites[key]  = makePiece(p,this);


  }

}
SelectBox=this.add.sprite( -4000,-4000, 'select');





  controls = new Phaser.Cameras.Controls.FixedKeyControl(controlConfig);
/*
  var emitter = particles.createEmitter({
      speed: 100,
      scale: { start: 1, end: 0 },
      blendMode: 'ADD'
  });
*/
//  var logo = this.physics.add.image(400, 100, 'logo');

  //logo.setVelocity(100, 200);
  //logo.setBounce(1, 1);
  //logo.setCollideWorldBounds(true);

  //emitter.startFollow(logo);
    $("#userMessage").focus(function(){
input.keyboard.enabled=false
  input.keyboard.clearCaptures()
    });
  $("#game").mouseenter(function() {


              //
                //  console.log(input.keyboard)
                  input.keyboard.addCapture('LEFT,RIGHT,UP,DOWN,Q,E');

                  input.keyboard.enabled=true;



          });

          $("#game").mouseleave(function() {

            input.keyboard.enabled=false;

           input.keyboard.clearCaptures()


          });
},


update:function(time, delta) {
  if(gameN.players["p1"]!=null) {
  if(gameN.players["p1"].name=="{{user.username}}"){
    localPlayer="p1"
  }
}
  if(gameN.players["p2"]!=null) {
  if(gameN.players["p2"].name=="{{user.username}}"){
    localPlayer="p2"
  }
}
  this.cameras.main.setZoom(Phaser.Math.Clamp(this.cameras.main.zoom, 0.2, 1));﻿
    this.cameras.main.scrollX=Phaser.Math.Clamp(this.cameras.main.scrollX, 0, 3400)

    this.cameras.main.scrollY=  Phaser.Math.Clamp(this.cameras.main.scrollY, 0, 2850);

if(gameN!=null) {

if(following==null){

  if(gameN.gamestate.needPromo!=null) {
  if(gameN.gamestate.board[gameN.gamestate.needPromo].owner==localPlayer) {
    var lPiece=pieceSprites[gameN.gamestate.needPromo];

    if(lPiece!=null){
    if(endBTN==null) {
      this.cameras.main.startFollow(lPiece)

      this.cameras.main.zoom=0.8;
      endBTN=this.add.sprite( lPiece.x-200,lPiece.y+100, 'end')
        endBTN.setInteractive({ useHandCursor: true })
    }
    if(promoteBTN ==null) {
      this.cameras.main.startFollow(lPiece)

      promoteBTN=this.add.sprite( lPiece.x+200,lPiece.y+100, 'promote')
      promoteBTN.setInteractive({ useHandCursor: true })
      this.cameras.main.zoom=0.8;
    }
  }
}
}

  }
if(localHasWon&&gameN.winner!=null) {

  if(winText==null) {
    var textConfig={fontSize:'120px',color:'#FFFFFF',fontFamily: 'Arial'};
    winText=this.add.text(2000,800,gameN.players[gameN.winner].name+" has won!",textConfig);
    this.cameras.main.startFollow(winText);
      //following=true;
  }
wintimer-=1;
if(wintimer<=0) {
  wintimer=200

  $("#toLobby").trigger('click')
  window.location.reload();



}
}


  if(gameN.players[gameN.gamestate.turnOwner]!=null) {
  turntext.text= gameN.players[gameN.gamestate.turnOwner].name+"'s turn."
  turntext.x=-2500+(this.cameras.main.zoom)*4200
    turntext.y=-1400+(this.cameras.main.zoom)*1200

  turntext.scale=(1/this.cameras.main.zoom)/2
//  console.log(this.cameras.main.zoom)
} else {
  turntext.x=-2500+(this.cameras.main.zoom)*4200
    turntext.y=-1400+(this.cameras.main.zoom)*1200

  turntext.scale=(1/this.cameras.main.zoom)/2
  //console.log(this.cameras.main.zoom)
}

$( "#lobby" ).empty();
$( "#lobby" ).append( "<p>Players: </p>" );
for (var lo in gameN.players) {

    var opu=gameN.players[lo].name

    $( "#lobby" ).append( "<p>"+opu+"</p>" );
}


$( "#lobby" ).append( "<p>Spectators: </p>" );
  for (var lo in gameN.spectators) {

      var opu=gameN.spectators[lo].name

      $( "#lobby" ).append( "<p>"+opu+"</p>" );
  }






  $( "#log" ).empty();
$( "#log" ).append( "<br>" );
  for (var lo in gameN.gamestate.movelog) {

      var opu=gameN.gamestate.movelog[lo]

      $( "#log" ).append( "<p>"+opu+"</p>" );
  }

  $( "#info" ).empty();
if(SelectedPiece==null) {
$( "#info" ).append( "<h1> Turn "+gameN.gamestate.turn+"</h1>" )

$( "#info" ).append( "<br>" );
if(gameN.players["p1"]!=null){

  if(gameN.gamestate.turnOwner=="p1") {
    $( "#info" ).append( "<p>P1: "+gameN.players["p1"].name +" (turn)");
  } else {

    $( "#info" ).append( "<p>P1: "+gameN.players["p1"].name );
  }




}
if(gameN.players["p2"]!=null){
  if(gameN.gamestate.turnOwner=="p2") {
    $( "#info" ).append( "<p>P2: "+gameN.players["p2"].name +" (turn)");
  } else {

    $( "#info" ).append( "<p>P2: "+gameN.players["p2"].name );
  }

}
$( "#info" ).append( "<p> P1 faces up, P2 faces down</p>" );
$( "#info" ).append( "<br>" );
$( "#info" ).append( "<p> Taikyoku (Ultimate) Shogi is a game.</p>" );
$( "#info" ).append( "<p> It is a ridiculously large variant of Shogi (Japanese Chess)</p>" );
$( "#info" ).append( "<p> Objective of the game is to kill your oppenent's Kings and Princes</p>" );
$( "#info" ).append( "<br>" );
$( "#info" ).append( "<p> Arrow Keys to move around </p>" );
$( "#info" ).append( "<p>Q and E to zoom </p>" );
} else {
$( "#info" ).append( "<h1>"+SelectedPiece.parRef.dat.name+"</h1>" );
$( "#info" ).append( "<p> Promotes to "+SelectedPiece.parRef.dat.promote+"</p>" );

}


  for(var key in pieceSprites) {
  var p= pieceSprites[key];

if(p!=null) {
 p.parRef.dat=gameN.gamestate.board[key];
  if(gameN.gamestate.board[key]!=null) {

  p.parRef.x=getPX(gameN.gamestate.board[key])
  p.parRef.y=getPY(gameN.gamestate.board[key])
} else {
  pieceSprites[key].parRef.text.destroy()
  pieceSprites[key].destroy()

  delete pieceSprites[key];
}
}
}

for(var key in pieceSprites) {

var p= pieceSprites[key];
if(p!=null){
if(!p.track) {

if(p.parRef.x!=p.parRef.dx||p.parRef.y!=p.parRef.dy) {
  p.track=true;
  makeMove=false
  this.cameras.main.startFollow(p,true,0.5,0.5,0,0)
    following=p;

} else {
  if(p.parRef.x==p.parRef.dx&&p.parRef.y==p.parRef.dy) {
    p.track=false
    makeMove=true


  }
}
}

if(following!=null)  {
  if(following.parRef.x==following.parRef.dx&&following.parRef.y==following.parRef.dy) {

    this.cameras.main.stopFollow()
    following.track=false;
      following=null;
  }

}




if(p.parRef.x>p.parRef.dx) {
p.parRef.dx+=30;
p.parRef.dx=Phaser.Math.Clamp(p.parRef.dx,p.parRef.dx,p.parRef.x)

this.cameras.main.zoom=0.3;

}

if(p.parRef.x<p.parRef.dx) {
p.parRef.dx-=30;
p.parRef.dx=Phaser.Math.Clamp(p.parRef.dx,p.parRef.x,p.parRef.dx)

  this.cameras.main.zoom=0.3;


}
if(p.parRef.y>p.parRef.dy) {
p.parRef.dy+=30;
p.parRef.dy=Phaser.Math.Clamp(p.parRef.dy,p.parRef.dy,p.parRef.y)

this.cameras.main.zoom=0.3;


}
if(p.parRef.y<p.parRef.dy) {
p.parRef.dy-=30;
p.parRef.dy=Phaser.Math.Clamp(p.parRef.dy,p.parRef.y,p.parRef.dy)

this.cameras.main.zoom=0.3;

}
if (p.parRef.text._text.length==1) {
p.parRef.text.x= p.parRef.dx-15
} else {
  p.parRef.text.x= p.parRef.dx-(40-(10))
}
p.parRef.text.y=p.parRef.dy-25

p.x=p.parRef.dx;
p.y=p.parRef.dy;
}

}


  if(SelectedPiece!=null) {
    SelectBox.destroy()
    SelectBox=this.add.sprite( -4000,-4000, 'select');
    SelectBox.x=SelectedPiece.x;
    SelectBox.y=SelectedPiece.y;
    if(SelectedPiece.parRef.dat.owner=="p2") {
      SelectBox.flipY=true;
    } else {
      SelectBox.flipY=false;
    }
  } else {
    SelectBox.x=-4000
    SelectBox.y=-4000
  }
pieces=       gameN.gamestate.board;
}

controls.update(delta);





}


})


var config = {
  type: Phaser.CANVAS,
  height:700,
  width:1100,
  parent:document.getElementById("gameCanvasDiv"),
  physics: {
      default: 'arcade',
      arcade: {
          gravity: { y: 200 }
      }
  },
  scene:[Preload,GameScene]
};


game = new Phaser.Game(config);

socket.on('upDatePiece', function (data) {
   console.log("please update")

   gameN.gamestate=data.state;
      console.log(gameN.gamestate.board[data.piece])
   pieceSprites[data.piece]  = makePiece(gameN.gamestate.board[data.piece],pieceSprites[data.piece].scene);
});

});
})





  var leaveGame=function(){
  //  console.log("s1")

    socket.emit('disconnectGame',{p:localPlayer})
    gameN={leave:true}
  }
  var startGame=function(){
  //  console.log("s1")
    socket.emit('startGame',{id:gameN.id})
  }


  var createRoom=function(roomNAME) {
    var txt = $('#roomtxt').val();
      if (/\S/.test(txt)&&txt.length<20) {

  socket.emit('createRoom', { roomName: txt, username: "{{user.username}}",game:"taikyoku" });
    $('#roomtxt').val("");
    $('#startGameNow').trigger('click')

  window.location.reload(true);
  }
  }

  var joinClick=function(txt) {

  socket.emit('joinRoom', { roomName: txt, username: "{{user.username}}", game:"taikyoku"});
    $('#roomtxt').val("");
    $('#startGameNow').trigger('click')

      window.location.reload(true);

  }

  var startGame=function(){
  //  console.log("s1")
    socket.emit('startGame',{id:gameN.id})
  }
  var joinRoom=function() {
    var txt = $('#roomtxt').val();
  socket.emit('joinRoom', { roomName: txt, username: "{{user.username}}", game:"taikyoku"});
    $('#roomtxt').val("");
    $('#startGameNow').trigger('click')

      window.location.reload(true);

  }


</script>
<!--<script type="module" type="text/javascript"  src='./javascripts/imports.js'></script> -->


<div class="row">



<div class="container2 container absH col-xs-6" id="theGame">

  <ul class="nav nav-tabs">
    <li ><a data-toggle="tab" id="startGameNow" href="#game">Game</a></li>
    <li class="active"><a class="active" id="toLobby" data-toggle="tab" href="#menu1g" aria-expanded="true">Rooms</a></li>
    <li><a data-toggle="tab" href="#menu2g">KSOSML</a></li>

  </ul>

  <div class="tab-content">
    <div id="game" class="tab-pane fade">

<div class="opa" id="gameCanvasDiv"></div>







</div>


<div id="menu1g" class="tab-pane fade in active show">
  {{#unless (inGame user.roomlock "taikyoku") }}


  <script type="text/javascript">




    setInterval(function(){


      if(gameN!=null ||localHasWon) {

$("#menu1g").empty()
window.location.reload(true);
}
}, 500);
//

</script>
  <h3>Create/Join Room</h3>
  <div class="mb-3">
     <input type="text" class="form-control" placeholder="Room" id="roomtxt" />
    <div class="input-group-append">
<button id ="create" type="button" class=" btn btn-success right">Create</button>

   <button  id ="join" type="button" class=" btn btn-success right">Join</button>
</div>


</div>

<button class="input-group-append btn btn-success" onClick="window.location.reload();">Refresh</button>
<hr>
<h3>Room List</h3>
<div class="container">


{{#each (rooms "taikyoku")}}
<div class="roomEntry">
Room name:  {{roomname}}  id: {{id}}  started:{{started}} <button id= "joinC" class="input-group-append btn btn-success" value="{{id}}">Join</button>
</div>

{{/each}}



</div>

{{/unless}}
{{#if (inGame user.roomlock "taikyoku") }}
<h1> Lobby</h1>
<button id ="sg" type="button" class=" btn btn-success right">Start Game</button>
<button id ="leaveBTN" type="button" class=" btn btn-success right">Leave Room</button>
<div id="lobby">
</div>



{{/if}}



</div>
<div id="menu2g" class="tab-pane fade">

</div></div>

</div>
<div class="col-xs-6 container3 absL border">

  <ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item">
      <a class="nav-link active" id="home-tab" data-toggle="tab" href="#info" role="tab" aria-controls="info" aria-selected="true">Info</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" id="profile-tab" data-toggle="tab" href="#log" role="tab" aria-controls="log" aria-selected="false">Move Log</a>
    </li>

  </ul>

<div class="tab-content" id="myTabContent">
  <div class="tab-pane fade show active in" id="info" role="tabpanel" aria-labelledby="info-tab">

  </div>
  <div class="tab-pane fade" id="log" role="tabpanel" aria-labelledby="log-tab"  style="overflow:auto; height:400px;">

  </div>

</div>








</div>
</div>
  {{/if}}
  {{#unless user}}
  You must be logged in to play
  {{/unless}}


</section>
