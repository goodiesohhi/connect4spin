
<section class="section">

  {{#if user}}
  <!--
  <canvas id="taicanvas" width="800" height="600"></canvas>
  <canvas class="right" id="taibox" width="200" height="600"></canvas>

-->
<script
			  src="https://code.jquery.com/jquery-3.5.1.js"
			  integrity="sha256-QWo7LDvxbWT2tbbQ97B53yJnYU3WhH/C8ycbRAkjPDc="
			  crossorigin="anonymous"></script>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
      <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
      <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>






<link rel="stylesheet" href="/stylesheets/style.css">
<script src="/javascripts/taidata.js"></script>

<script type="text/javascript">

var body = document.body,
    overlay = document.querySelector('.overlay'),
    overlayBtts = document.querySelectorAll('button[class$="overlay"]');

[].forEach.call(overlayBtts, function(btt) {

  btt.addEventListener('click', function() {

     /* Detect the button class name */
     var overlayOpen = this.className === 'open-overlay';

     /* Toggle the aria-hidden state on the overlay and the
        no-scroll class on the body */
     overlay.setAttribute('aria-hidden', !overlayOpen);
     body.classList.toggle('noscroll', overlayOpen);

     /* On some mobile browser when the overlay was previously
        opened and scrolled, if you open it again it doesn't
        reset its scrollTop property */
     overlay.scrollTop = 0;

  }, false);

});


var game;

jQuery(function ($) {
$( document ).ready(function() {
//  $( "#info" ).trigger('click')


  $('#create').click(function(){

    createRoom();
    $('#startGameNow').trigger('click')

    window.location.reload(true);
  })

  $('#leaveBTN').click(function(){

    leaveGame();
    $('#logo').trigger('click')

   window.location.reload(true);
  })

  $('#sg').click(function(){

    startGame();
    $('#startGameNow').trigger('click')

    window.location.reload(true);
  })

  $('#joinC').click(function(){

    joinClick($(this).attr("value"));
    $('#startGameNow').trigger('click')

    window.location.reload(true);
  })



  $('#join').click(function(){

    joinRoom();
    $('#startGameNow').trigger('click')

    window.location.reload(true);
  })







taiSocket=socket;
var cam=null
var input=null;
input=null;
loaded=false
var Preload = new Phaser.Class({
Extends: Phaser.Scene,

  initialize:
  function GameScene ()
   {
       Phaser.Scene.call(this, { key: 'Preload', active: true });


   },
    preload:function () {

  },

    create:function(){




    },

    update:function()

    {

if(gameN!=null) {

      $( "#lobby" ).empty();
      $( "#lobby" ).append( "<p>Players: </p>" );
      for (var lo in gameN.players) {
          var opu=gameN.players[lo].name
          if(lo=="p1") {
            opu+= " (Room Owner)"
          }


          $( "#lobby" ).append( "<p>"+opu+"</p>" );
      }


      $( "#lobby" ).append( "<p>Spectators: </p>" );
        for (var lo in gameN.spectators) {

            var opu=gameN.spectators[lo].name

            $( "#lobby" ).append( "<p>"+opu+"</p>" );
        }

        if(gameN.started) {
        $('#startGameNow').trigger('click')

        this.scene.start('gameScene');
      }
      }






      if(!loaded) {

        if(gameN!=null) {

          if(gameN.gamestate!=null) {

            loaded=true;

            if(gameN.players["p1"]!=null) {
            if(gameN.players["p1"].name=="{{user.username}}"){
              localPlayer="p1"
            }
          }
            if(gameN.players["p2"]!=null) {
            if(gameN.players["p2"].name=="{{user.username}}"){
              localPlayer="p2"
            }
          }
          if(localPlayer!="p1") {
              $( "#sg" ).remove();
              startGame=null;

          }
          if (gameN.started) {


                $( "#sg" ).remove();
                startGame=null;


          }
          if(gameN.players["p2"]==null) {
              if(!testing) {
            $( "#sg" ).remove();

            startGame=null;
          }
          }


          }


        }
      }

    }


})


GameScene = new Phaser.Class({


Extends: Phaser.Scene,

initialize:

function GameScene ()
 {

     Phaser.Scene.call(this, { key: 'gameScene', active: false });


 },

preload:function ()
{

  this.load.tilemapTiledJSON('map', '/javascripts/board.json');
  if (this.game.canvas!=null) {
  this.game.canvas.id = 'game';
  }






},

create:function ()
{
  /*
  var emitter = particles.createEmitter({
      speed: 100,
      scale: { start: 1, end: 0 },
      blendMode: 'ADD'
  });
*/
//  var logo = this.physics.add.image(400, 100, 'logo');

  //logo.setVelocity(100, 200);
  //logo.setBounce(1, 1);
  //logo.setCollideWorldBounds(true);

  //emitter.startFollow(logo);
    $("#userMessage").focus(function(){
input.keyboard.enabled=false
  input.keyboard.clearCaptures()
    });
  $("#game").mouseenter(function() {


              //
                //  console.log(input.keyboard)
                  input.keyboard.addCapture('LEFT,RIGHT,UP,DOWN,Q,E');

                  input.keyboard.enabled=true;



          });

          $("#game").mouseleave(function() {

            input.keyboard.enabled=false;

           input.keyboard.clearCaptures()


          });
},


update:function(time, delta) {
  if(gameN.players["p1"]!=null) {
  if(gameN.players["p1"].name=="{{user.username}}"){
    localPlayer="p1"
  }
}
  if(gameN.players["p2"]!=null) {
  if(gameN.players["p2"].name=="{{user.username}}"){
    localPlayer="p2"
  }
}
if(gameN.players["p3"]!=null) {
if(gameN.players["p3"].name=="{{user.username}}"){
  localPlayer="p3"
}
}
if(gameN.players["p4"]!=null) {
if(gameN.players["p4"].name=="{{user.username}}"){
  localPlayer="p4"
}
}


if(gameN!=null) {


}

controls.update(delta);





}


})


var config = {
  type: Phaser.CANVAS,
  height:700,
  width:1100,
  parent:document.getElementById("gameCanvasDiv"),
  physics: {
      default: 'arcade',
      arcade: {
          gravity: { y: 200 }
      }
  },
  scene:[Preload,GameScene]
};


game = new Phaser.Game(config);

socket.on('nothing', function (data) {

});

});
})







  var leaveGame=function(){
  //  console.log("s1")

    socket.emit('disconnectGame',{p:localPlayer})
    gameN={leave:true}
  }
  var startGame=function(){
  //  console.log("s1")
    socket.emit('startGame',{id:gameN.id})
  }


  var createRoom=function(roomNAME) {
    var txt = $('#roomtxt').val();
      if (/\S/.test(txt)&&txt.length<20) {

  socket.emit('createRoom', { roomName: txt, username: "{{user.username}}",game:"taikyoku" });
    $('#roomtxt').val("");
    $('#startGameNow').trigger('click')

  window.location.reload(true);
  }
  }

  var joinClick=function(txt) {

  socket.emit('joinRoom', { roomName: txt, username: "{{user.username}}", game:"taikyoku"});
    $('#roomtxt').val("");
    $('#startGameNow').trigger('click')

      window.location.reload(true);

  }

  var startGame=function(){
  //  console.log("s1")
    socket.emit('startGame',{id:gameN.id})
  }
  var joinRoom=function() {
    var txt = $('#roomtxt').val();
  socket.emit('joinRoom', { roomName: txt, username: "{{user.username}}", game:"taikyoku"});
    $('#roomtxt').val("");
    $('#startGameNow').trigger('click')

      window.location.reload(true);

  }


</script>
<!--<script type="module" type="text/javascript"  src='./javascripts/imports.js'></script> -->


<div class="row">



<div class="container2 container absH col-xs-6" id="theGame">

  <ul class="nav nav-tabs">
    <li ><a data-toggle="tab" id="startGameNow" href="#game">Game</a></li>
    <li class="active"><a class="active" id="toLobby" data-toggle="tab" href="#menu1g" aria-expanded="true">Rooms</a></li>
    <li><a data-toggle="tab" href="#menu2g">KSOSML</a></li>

  </ul>

  <div class="tab-content">
    <div id="game" class="tab-pane fade">

<div class="opa" id="gameCanvasDiv"></div>







</div>


<div id="menu1g" class="tab-pane fade in active show">
  {{#unless (inGame user.roomlock "htg") }}


  <script type="text/javascript">




    setInterval(function(){


      if(gameN!=null ||localHasWon) {

$("#menu1g").empty()
window.location.reload(true);
}
}, 500);
//

</script>
  <h3>Create/Join Room</h3>
  <div class="mb-3">
     <input type="text" class="form-control" placeholder="Room" id="roomtxt" />
    <div class="input-group-append">
<button id ="create" type="button" class=" btn btn-success right">Create</button>

   <button  id ="join" type="button" class=" btn btn-success right">Join</button>
</div>


</div>

<button class="input-group-append btn btn-success" onClick="window.location.reload();">Refresh</button>
<hr>
<h3>Room List</h3>
<div class="container">


{{#each (rooms "htg")}}
<div class="roomEntry">
Room name:  {{roomname}}  id: {{id}}  started:{{started}} <button id= "joinC" class="input-group-append btn btn-success" value="{{id}}">Join</button>
</div>

{{/each}}



</div>

{{/unless}}
{{#if (inGame user.roomlock "htg") }}
<h1> Lobby</h1>
<button id ="sg" type="button" class=" btn btn-success right">Start Game</button>
<button id ="leaveBTN" type="button" class=" btn btn-success right">Leave Room</button>
<div id="lobby">
</div>



{{/if}}



</div>
<div id="menu2g" class="tab-pane fade">

</div></div>

</div>
<div class="col-xs-6 container3 absL border">

  <ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item">
      <a class="nav-link active" id="home-tab" data-toggle="tab" href="#info" role="tab" aria-controls="info" aria-selected="true">Info</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" id="profile-tab" data-toggle="tab" href="#log" role="tab" aria-controls="log" aria-selected="false">Move Log</a>
    </li>

  </ul>

<div class="tab-content" id="myTabContent">
  <div class="tab-pane fade show active in" id="info" role="tabpanel" aria-labelledby="info-tab">

  </div>
  <div class="tab-pane fade" id="log" role="tabpanel" aria-labelledby="log-tab"  style="overflow:auto; height:400px;">

  </div>

</div>








</div>
</div>
  {{/if}}
  {{#unless user}}
  You must be logged in to play
  {{/unless}}


</section>
